{"fileTypes": ["rs"], "name": "Rust", "patterns": [{"begin": "\\b(impl)\\b", "beginCaptures": {"1": {"name": "storage.type.rust"}}, "comment": "Implementation", "end": "\\{", "patterns": [{"include": "#block_comment"}, {"include": "#line_comment"}, {"include": "#sigils"}, {"include": "#mut"}, {"include": "#dyn"}, {"include": "#ref_lifetime"}, {"include": "#core_types"}, {"include": "#core_marker"}, {"include": "#core_traits"}, {"include": "#std_types"}, {"include": "#std_traits"}, {"include": "#type_params"}, {"include": "#where"}, {"match": "\\bfor\\b", "name": "storage.type.rust"}, {"include": "#type"}]}, {"include": "#block_doc_comment"}, {"include": "#block_comment"}, {"include": "#line_doc_comment"}, {"include": "#line_comment"}, {"begin": "#\\!?\\[", "comment": "Attribute", "end": "\\]", "name": "meta.attribute.rust", "patterns": [{"include": "#string_literal"}, {"include": "#block_doc_comment"}, {"include": "#block_comment"}, {"include": "#line_doc_comment"}, {"include": "#line_comment"}]}, {"comment": "Single-quote string literal (character)", "match": "b?'([^'\\\\]|\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))'", "name": "string.quoted.single.rust"}, {"include": "#string_literal"}, {"include": "#raw_string_literal"}, {"comment": "Floating point literal (fraction)", "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?(f32|f64)?\\b", "name": "constant.numeric.float.rust"}, {"comment": "Floating point literal (exponent)", "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+(f32|f64)?\\b", "name": "constant.numeric.float.rust"}, {"comment": "Floating point literal (typed)", "match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?(f32|f64)\\b", "name": "constant.numeric.float.rust"}, {"comment": "Integer literal (decimal)", "match": "\\b[0-9][0-9_]*([ui](8|16|32|64|128|s|size))?\\b", "name": "constant.numeric.integer.decimal.rust"}, {"comment": "Integer literal (hexadecimal)", "match": "\\b0x[a-fA-F0-9_]+([ui](8|16|32|64|128|s|size))?\\b", "name": "constant.numeric.integer.hexadecimal.rust"}, {"comment": "Integer literal (octal)", "match": "\\b0o[0-7_]+([ui](8|16|32|64|128|s|size))?\\b", "name": "constant.numeric.integer.octal.rust"}, {"comment": "Integer literal (binary)", "match": "\\b0b[01_]+([ui](8|16|32|64|128|s|size))?\\b", "name": "constant.numeric.integer.binary.rust"}, {"comment": "Static storage modifier", "match": "\\bstatic\\b", "name": "storage.modifier.static.rust"}, {"comment": "Boolean constant", "match": "\\b(true|false)\\b", "name": "constant.language.boolean.rust"}, {"comment": "Control keyword", "match": "\\b(async|await|break|continue|else|if|in|for|loop|match|return|try|while)\\b", "name": "keyword.control.rust"}, {"comment": "Keyword", "match": "\\b(crate|extern|mod|let|ref|use|super|move)\\b", "name": "keyword.other.rust"}, {"comment": "Reserved keyword", "match": "\\b(abstract|alignof|become|do|final|macro|offsetof|override|priv|proc|pure|sizeof|typeof|virtual|yield)\\b", "name": "invalid.deprecated.rust"}, {"include": "#unsafe"}, {"include": "#sigils"}, {"include": "#self"}, {"include": "#mut"}, {"include": "#dyn"}, {"include": "#impl"}, {"include": "#box"}, {"include": "#lifetime"}, {"include": "#ref_lifetime"}, {"include": "#const"}, {"include": "#pub"}, {"comment": "Miscellaneous operator", "match": "(=>|::|\\bas\\b)", "name": "keyword.operator.misc.rust"}, {"comment": "Comparison operator", "match": "(&&|\\|\\||==|!=)", "name": "keyword.operator.comparison.rust"}, {"comment": "Assignment operator", "match": "(\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|=)", "name": "keyword.operator.assignment.rust"}, {"comment": "Arithmetic operator", "match": "(!|\\+|-|/|\\*|%|\\^|&|\\||<<|>>)", "name": "keyword.operator.arithmetic.rust"}, {"comment": "Comparison operator (second group because of regex precedence)", "match": "(<=|>=|<|>)", "name": "keyword.operator.comparison.rust"}, {"include": "#core_types"}, {"include": "#core_vars"}, {"include": "#core_marker"}, {"include": "#core_traits"}, {"include": "#std_types"}, {"include": "#std_traits"}, {"comment": "Built-in macro", "match": "\\b(macro_rules|compile_error|format_args|env|option_env|concat_idents|concat|line|column|file|stringify|include|include_str|include_bytes|module_path|cfg)!", "name": "support.function.builtin.rust"}, {"comment": "Core macro", "match": "\\b(panic|assert|assert_eq|assert_ne|debug_assert|debug_assert_eq|debug_assert_ne|try|write|writeln|unreachable|unimplemented)!", "name": "support.function.core.rust"}, {"comment": "Standard library macro", "match": "\\b(format|print|println|eprint|eprintln|select|vec)!", "name": "support.function.std.rust"}, {"comment": "Logging macro", "match": "\\b(log|error|warn|info|debug|trace|log_enabled)!", "name": "support.function.log.rust"}, {"captures": {"1": {"name": "entity.name.function.macro.rust"}}, "comment": "Invokation of a macro", "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*\\!)\\s*[({\\[]"}, {"captures": {"1": {"name": "entity.name.function.rust"}}, "comment": "Function call", "match": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*\\("}, {"begin": "\\b([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)\\s*(::)(?=\\s*<.*>\\s*\\()", "captures": {"1": {"name": "entity.name.function.rust"}, "2": {"name": "keyword.operator.misc.rust"}}, "comment": "Function call with type parameters", "end": "\\(", "patterns": [{"include": "#type_params"}]}, {"begin": "\\b(fn)\\s+([A-Za-z][A-Za-z0-9_]*|_[A-Za-z0-9_]+)", "beginCaptures": {"1": {"name": "keyword.other.fn.rust"}, "2": {"name": "entity.name.function.rust"}}, "comment": "Function definition", "end": "[\\{;]", "patterns": [{"include": "#block_comment"}, {"include": "#line_comment"}, {"include": "#sigils"}, {"include": "#self"}, {"include": "#mut"}, {"include": "#dyn"}, {"include": "#impl"}, {"include": "#ref_lifetime"}, {"include": "#core_types"}, {"include": "#core_marker"}, {"include": "#core_traits"}, {"include": "#std_types"}, {"include": "#std_traits"}, {"include": "#type_params"}, {"include": "#const"}, {"include": "#where"}, {"include": "#unsafe"}, {"comment": "Function arguments", "match": "\\bfn\\b", "name": "keyword.other.fn.rust"}]}, {"begin": "\\b(enum|struct|trait|union)\\s+([a-zA-Z_][a-zA-Z0-9_]*)", "beginCaptures": {"1": {"name": "storage.type.rust"}, "2": {"name": "entity.name.type.rust"}}, "comment": "Type declaration", "end": "[\\{\\(;]", "patterns": [{"include": "#block_comment"}, {"include": "#line_comment"}, {"include": "#core_traits"}, {"include": "#std_traits"}, {"include": "#type_params"}, {"include": "#core_types"}, {"include": "#pub"}, {"include": "#where"}]}, {"begin": "\\b(type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)", "beginCaptures": {"1": {"name": "storage.type.rust"}, "2": {"name": "entity.name.type.rust"}}, "comment": "Type alias", "end": ";", "patterns": [{"include": "#block_comment"}, {"include": "#line_comment"}, {"include": "#sigils"}, {"include": "#mut"}, {"include": "#dyn"}, {"include": "#impl"}, {"include": "#lifetime"}, {"include": "#ref_lifetime"}, {"include": "#core_types"}, {"include": "#core_marker"}, {"include": "#core_traits"}, {"include": "#std_types"}, {"include": "#std_traits"}, {"include": "#type_params"}]}], "repository": {"block_comment": {"begin": "/\\*", "comment": "Block comment", "end": "\\*/", "name": "comment.block.rust", "patterns": [{"include": "#block_doc_comment"}, {"include": "#block_comment"}]}, "block_doc_comment": {"begin": "/\\*[\\*!](?![\\*/])", "comment": "Block documentation comment", "end": "\\*/", "name": "comment.block.documentation.rust", "patterns": [{"include": "#block_doc_comment"}, {"include": "#block_comment"}]}, "box": {"comment": "Box storage modifier", "match": "\\bbox\\b", "name": "storage.modifier.box.rust"}, "const": {"comment": "Const storage modifier", "match": "\\bconst\\b", "name": "storage.modifier.const.rust"}, "core_marker": {"comment": "Core trait (marker)", "match": "\\b(Copy|Send|Sized|Sync)\\b", "name": "support.type.marker.rust"}, "core_traits": {"comment": "Core trait", "match": "\\b(Drop|Fn|FnMut|FnOnce|Clone|PartialEq|PartialOrd|Eq|Ord|AsRef|AsMut|Into|From|Default|Iterator|Extend|IntoIterator|DoubleEndedIterator|ExactSizeIterator)\\b", "name": "support.type.core.rust"}, "core_types": {"comment": "Built-in/core type", "match": "\\b(bool|char|usize|isize|u8|u16|u32|u64|u128|i8|i16|i32|i64|i128|f32|f64|str|Self|Option|Result)\\b", "name": "storage.type.core.rust"}, "core_vars": {"comment": "Core type variant", "match": "\\b(Some|None|Ok|Err)\\b", "name": "support.constant.core.rust"}, "dyn": {"comment": "Dynamic modifier", "match": "\\bdyn\\b", "name": "storage.modifier.dyn.rust"}, "escaped_character": {"match": "\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)", "name": "constant.character.escape.rust"}, "impl": {"comment": "Existential type modifier", "match": "\\bimpl\\b", "name": "storage.modifier.impl.rust"}, "lifetime": {"captures": {"1": {"name": "entity.name.lifetime.rust"}}, "comment": "Named lifetime", "match": "'([a-zA-Z_][a-zA-Z0-9_]*)\\b", "name": "storage.modifier.lifetime.rust"}, "line_comment": {"begin": "//", "comment": "Single-line comment", "end": "$", "name": "comment.line.double-slash.rust"}, "line_doc_comment": {"begin": "//[!/](?=[^/])", "comment": "Single-line documentation comment", "end": "$", "name": "comment.line.documentation.rust"}, "mut": {"comment": "Mutable storage modifier", "match": "\\bmut\\b", "name": "storage.modifier.mut.rust"}, "pub": {"comment": "Visibility modifier", "match": "\\bpub\\b", "name": "storage.modifier.visibility.rust"}, "raw_string_literal": {"begin": "b?r(#*)\"", "comment": "Raw double-quote string literal", "end": "\"\\1", "name": "string.quoted.double.raw.rust"}, "ref_lifetime": {"captures": {"1": {"name": "storage.modifier.lifetime.rust"}, "2": {"name": "entity.name.lifetime.rust"}}, "comment": "Reference with named lifetime", "match": "&('([a-zA-Z_][a-zA-Z0-9_]*))\\b"}, "self": {"comment": "Self variable", "match": "\\bself\\b", "name": "variable.language.rust"}, "sigils": {"comment": "Sigil", "match": "[&*](?=[a-zA-Z0-9_\\(\\[\\|\\\"]+)", "name": "keyword.operator.sigil.rust"}, "std_traits": {"comment": "Standard library trait", "match": "\\b(ToOwned|ToString)\\b", "name": "support.type.std.rust"}, "std_types": {"comment": "Standard library type", "match": "\\b(Box|String|Vec|Path|PathBuf)\\b", "name": "storage.class.std.rust"}, "string_literal": {"begin": "b?\"", "comment": "Double-quote string literal", "end": "\"", "name": "string.quoted.double.rust", "patterns": [{"include": "#escaped_character"}]}, "type": {"comment": "A type", "match": "\\b([A-Za-z][_A-Za-z0-9]*|_[_A-Za-z0-9]+)\\b", "name": "entity.name.type.rust"}, "type_params": {"begin": "<(?![=<])", "comment": "Type parameters", "end": "(?<![-])>", "name": "meta.type_params.rust", "patterns": [{"include": "#block_comment"}, {"include": "#line_comment"}, {"include": "#sigils"}, {"include": "#mut"}, {"include": "#dyn"}, {"include": "#impl"}, {"include": "#lifetime"}, {"include": "#core_types"}, {"include": "#core_marker"}, {"include": "#core_traits"}, {"include": "#std_types"}, {"include": "#std_traits"}, {"include": "#type_params"}]}, "unsafe": {"comment": "Unsafe code keyword", "match": "\\bunsafe\\b", "name": "keyword.other.unsafe.rust"}, "where": {"comment": "Generic where clause", "match": "\\bwhere\\b", "name": "keyword.other.where.rust"}}, "scopeName": "source.rust"}
